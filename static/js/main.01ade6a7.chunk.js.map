{"version":3,"sources":["Header.js","Spinner.js","firebase.js","Lyrics.js","Main.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","aria-label","href","Spinner","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Lyric","props","lyrics","map","word","index","replacedWord","i","length","difficulty","toLowerCase","key","onSubmit","e","submit","action","onChange","change","Main","artistInput","setState","firebaseData","artist","target","value","song","state","songInput","getLyrics","preventDefault","isLoading","Axios","get","then","response","data","splitLyrics","replace","split","swal","title","icon","button","handleRemove","dataKey","database","ref","child","remove","event","replayLyrics","text","push","test","userGuess","handleSubmit","replay","difficultyNumber","parseInt","storedFirebaseData","on","val","artistSongLyrics","id","this","htmlFor","required","type","placeholder","onClick","src","alt","lyricsFrom","toUpperCase","defaultValue","Lyrics","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.01ade6a7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <header>\r\n        <div className=\"wrapper\">\r\n          <a className=\"btn\"  aria-label=\"artist\" href=\"#main\">Let's Play!</a>\r\n        </div>\r\n      </header>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <div className=\"spinner\"></div>\r\n        \r\n    );\r\n}\r\nexport default Spinner;","import firebase from 'firebase/app';    //firebase\r\nimport 'firebase/database';             //firebase database\r\n\r\n  // Your web app's Firebase configuration\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyA3-ydP6B_gCEZnb3Qhw_bO8Rb58aMUutA\",\r\n    authDomain: \"savethelyric.firebaseapp.com\",\r\n    databaseURL: \"https://savethelyric.firebaseio.com\",\r\n    projectId: \"savethelyric\",\r\n    storageBucket: \"savethelyric.appspot.com\",\r\n    messagingSenderId: \"90336307330\",\r\n    appId: \"1:90336307330:web:40ef96b904978aafcbec9b\"\r\n  };\r\n\r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React from \"react\";\r\nconst Lyric = (props) => {\r\n  return (\r\n    //Maps over the split lyrics array and either creates an input or returns the word in the array\r\n    props.lyrics.map((word, index) => {\r\n      const replacedWord = props.lyrics;\r\n      for (let i = 10; i < replacedWord.length; i += props.difficulty) {\r\n        if (word === \",\" || word === \"!\" || word === \"\" || word === \".\" || word === \"?\") {\r\n          return\r\n        }\r\n        if (index === i) {\r\n          word = word.toLowerCase();\r\n          return (\r\n            <form key={index} onSubmit={(e) => props.submit(e, word)} action=\"\">\r\n              <input word={word} onChange={props.change} />\r\n            </form>\r\n          )\r\n        }\r\n      }\r\n      return word + \" \"\r\n    })\r\n  )\r\n}\r\nexport default Lyric;","import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\nimport Spinner from './Spinner';\r\nimport firebase from './firebase';  \r\nimport swal from 'sweetalert';\r\nimport Lyrics from './Lyrics';\r\n\r\nclass Main extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      firebaseData: {\r\n        artist: \"\",\r\n        song: \"\",\r\n        lyrics: \"\",\r\n      },\r\n      isLoading: false,\r\n      splitLyrics: [],\r\n      userGuess: '',\r\n      storedFirebaseData: [],\r\n      replayLyrics: [],\r\n      difficulty: 60,\r\n    }\r\n  }\r\n\r\n  //FUNCTIONS\r\n\r\n  //user input, stored into state\r\n  artistInput = (e) => {\r\n    this.setState({\r\n      firebaseData: {\r\n        artist: e.target.value,\r\n        song: this.state.firebaseData.song,\r\n      }\r\n    })\r\n  }\r\n\r\n  //user input, stored into state\r\n  songInput = (e)=> {\r\n    this.setState({\r\n      firebaseData: {\r\n        song: e.target.value,\r\n        artist: this.state.firebaseData.artist,\r\n      }\r\n    })\r\n  }\r\n\r\n  //Axios call to get lyrics from API\r\n  getLyrics = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      isLoading: true\r\n    });\r\n    Axios.get(`https://api.lyrics.ovh/v1/${this.state.firebaseData.artist}/${this.state.firebaseData.song}`)\r\n    .then((response) => {\r\n\r\n      //Remove unwanted characters from the lyrics and split each word into an array\r\n      const lyrics = response.data.lyrics\r\n      const splitLyrics = lyrics.replace(/\\n/g, \" \").replace(/\\r/g, \"\").replace(\"?\", \" ?\").replace(/,/g, \" ,\").split(\" \")\r\n      this.setState({\r\n        firebaseData: {\r\n          artist: this.state.firebaseData.artist,\r\n          song: this.state.firebaseData.song,\r\n          lyrics\r\n        },\r\n        isLoading: false,\r\n        splitLyrics: splitLyrics,\r\n      });\r\n\r\n      //error handling for no results\r\n      if (lyrics === \"\") {\r\n        swal({\r\n          title: \" try again!\",\r\n          icon: \"error\",\r\n          button: \"OK\",\r\n        });\r\n      }\r\n    })\r\n  }\r\n\r\n  // Remove Saved Song\r\n  handleRemove = (dataKey) => {\r\n\r\n    // Open portal to Firebase\r\n    const dbRef = firebase.database().ref();\r\n    \r\n    // Remove data stored in key\r\n    dbRef.child(dataKey).remove(); \r\n  }\r\n  \r\n  // Store firebaseData: (artist, song, lyrics) to firebase\r\n  firebase = (event) => {\r\n    event.preventDefault();\r\n      this.setState({\r\n        replayLyrics: []\r\n      })\r\n    \r\n    //Error handling for user trying to save empty lyric field to firebase\r\n    if (this.state.firebaseData.lyrics === \"\") {\r\n      swal({\r\n        title: \"Try again!\",\r\n        text: \"There is no lyrics to save || Song is already saved\",\r\n        icon: \"error\",\r\n        button: \"OK\",\r\n      })\r\n    } else if (this.state.lyrics !== \"\") {\r\n\r\n    // open portal to Firebase\r\n    const dbRef = firebase.database().ref()\r\n\r\n    // add new record to Firebase\r\n    dbRef.push(this.state.firebaseData);\r\n    \r\n    // reset input field\r\n      this.setState({\r\n        firebaseData: {\r\n          artist: \"\",\r\n          song: \"\",\r\n          lyrics: \"\"\r\n        },\r\n        isLoading: false,\r\n      });\r\n    }\r\n    this.setState({\r\n      firebaseData: {\r\n        artist: \"\",\r\n        song: \"\",\r\n        lyrics: \"\"\r\n      },\r\n      splitLyrics: [],\r\n    });\r\n  }\r\n\r\n  //sets state for when user guesses missing lyric\r\n  test = (e) => {\r\n    this.setState({\r\n      userGuess: e.target.value\r\n    })\r\n  }\r\n\r\n  //checks userGuess state against the missing lyric\r\n  handleSubmit = (e, word) => {\r\n    e.preventDefault()\r\n    if (this.state.userGuess === word) {\r\n      swal({\r\n        title: \"Good job!\",\r\n        text: \"On to the next!\",\r\n        icon: \"success\",\r\n        button: \"Let's Go!\",\r\n      })\r\n    } else  {\r\n      swal({\r\n        title: \"OOPS!\",\r\n        text: \"Incorrect word!\",\r\n        icon: \"error\",\r\n        button: \"Try again!\",\r\n      });\r\n    }\r\n  }\r\n\r\n  //Displays lyrics saved in firebase to play again\r\n  replayLyrics = (replay) => {\r\n    this.setState({\r\n      splitLyrics: []\r\n    })\r\n    const lyrics = replay\r\n    const splitLyrics = lyrics.replace(/\\n/g, \" \").replace(/\\r/g, \"\").replace(/\\?/g, \" ?\").replace(/\\,/g, \" ,\").split(\" \")\r\n    this.setState({\r\n      replayLyrics: splitLyrics\r\n    })\r\n  }\r\n\r\n  difficulty = (e) => {\r\n    const difficultyNumber = parseInt(e.target.value, 10)\r\n    this.setState({\r\n      difficulty: difficultyNumber,\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    // create a Firebase reference\r\n    const dbRef = firebase.database().ref();\r\n\r\n    // listen to the value change and use `response` as the db value\r\n    dbRef.on('value', (response) => {\r\n\r\n      // clean up data from Firebase and store in state\r\n      const storedFirebaseData = [];\r\n      const data = response.val();\r\n\r\n      for(let key in data) {\r\n        storedFirebaseData.push({\r\n            key: key, \r\n            artistSongLyrics: data[key]\r\n        });  \r\n      }\r\n      this.setState({\r\n          storedFirebaseData\r\n      });\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <main id=\"main\">\r\n        <div className=\"wrapper mainContainer\">\r\n        {/* One */}\r\n          <section className=\"containerOne\">\r\n            <div className=\"findLyrics\">\r\n              <div className=\"inputContainer\">\r\n                <h1>Test your knowledge!</h1>\r\n  \r\n                <form onSubmit={this.getLyrics} action=\"\">\r\n  \r\n                  <div className=\"artist\">\r\n                    <label htmlFor=\"artist\">Artist:</label>\r\n                    <input\r\n                      required\r\n                      type=\"text\"\r\n                      id=\"artist\"\r\n                      className=\"artist\"\r\n                      placeholder=\"Artist\"\r\n                      aria-label=\"artist\"\r\n                      onChange={this.artistInput}\r\n                      value={this.state.firebaseData.artist}\r\n                    />\r\n                  </div>\r\n  \r\n                  <div className=\"song\">\r\n                    <label htmlFor=\"song\">Song:</label>\r\n                    <input\r\n                      required\r\n                      type=\"text\"\r\n                      id=\"song\"\r\n                      className=\"song\"\r\n                      placeholder=\"Song\"\r\n                      aria-label=\"song\"\r\n                      onChange={this.songInput}\r\n                      value={this.state.firebaseData.song}\r\n                    />\r\n                  </div>\r\n  \r\n                  <div className=\"buttonContainer\">\r\n                    <button type=\"submit\">Find lyrics</button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n\r\n              <div className=\"difficultyContainer\">\r\n                <h1>Difficulty</h1>\r\n                <div className=\"buttonContainer\">\r\n                  <button onClick={this.difficulty} value=\"55\">Easy</button>\r\n                  <button onClick={this.difficulty} value=\"35\" >Medium</button>\r\n                  <button onClick={this.difficulty} value=\"15\">Hard</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"myLyrics\">\r\n              <div className=\"logoContainer\">\r\n                <img src=\"./assets/myLyricsButton.jpg\" alt=\"\"></img>\r\n              </div>\r\n              <h1>My Lyrics</h1>\r\n\r\n              {this.state.storedFirebaseData.map((data, index) => {\r\n                const lyricsFrom = data.artistSongLyrics.lyrics\r\n                return (\r\n                  <div className=\"allSavedSongs\" key={index}>\r\n                    <div className=\"savedSongs\" key={index}>\r\n\r\n                      <button onClick={() => this.replayLyrics(lyricsFrom)} test={lyricsFrom}>\r\n                        {data.artistSongLyrics.artist.toUpperCase()} - {data.artistSongLyrics.song.toUpperCase()}\r\n                      </button>\r\n                          \r\n                      <button \r\n                        onClick={() => this.handleRemove(data.key)}\r\n                        className=\"\">\r\n                      </button>\r\n\r\n                    </div>\r\n                  </div>\r\n                )\r\n              })}\r\n            </div>\r\n\r\n          </section>\r\n          {/* Two */}\r\n          <section className=\"containerTwo\">\r\n            <form action=\"\">\r\n              <div className=\"lyrics\" defaultValue=\"\">\r\n\r\n                {this.state.isLoading \r\n                  ? \r\n                    (\r\n                      <div className=\"artSpinnerBox\">\r\n                        <Spinner />\r\n                      </div>\r\n                    ) \r\n                  : \r\n                    //Maps over the split lyrics array and either creates an input or returns the word in the array\r\n                    <Lyrics lyrics={this.state.splitLyrics} submit={(e, word) => this.handleSubmit(e, word)} change={this.test} difficulty={this.state.difficulty} />\r\n                }\r\n\r\n                <Lyrics lyrics={this.state.replayLyrics} submit={(e, word) => this.handleSubmit(e, word)} change={this.test} difficulty={this.state.difficulty} />\r\n              </div>\r\n\r\n              <div className=\"buttonContainer\">\r\n                <button onClick={this.firebase} className=\"saveLyrics\">\r\n                  Store lyrics\r\n                </button>\r\n              </div>\r\n\r\n            </form>\r\n          </section>\r\n        </div>\r\n      </main>\r\n    )\r\n  }\r\n}\r\nexport default Main;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <>\r\n        <footer>\r\n            <p>Copyright © 2020  | <a href=\"https://junocollege.com/\" target=\"blank\">Created at Juno College</a></p>\r\n        </footer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\n// import Firebase from './FirebaseComponent'\r\nimport './App.css';\r\n\r\nimport Header from './Header.js';\r\nimport Main from \"./Main.js\"\r\nimport Footer from \"./Footer\"\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      \r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header />\r\n        <Main />\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}